function [LineCoords, SeamLength, Discretisation, Velocity] = DrawTrajectory( L, B )
%DrawTrajectory Aufruf einer GUI, um eine Trajektorie zeichnen zu lassen
%   Detailed explanation goes here

%% Layout der GUI

% Größe der GUI festlegen
guisize = [800 600];

% Auslesen der Bildschirmauflösung
scrsz = get(0,'ScreenSize');

MainWindow = figure('MenuBar','none', ...
    'Name','Trajektorie zeichnen', ...
    'ToolBar','none','NumberTitle','off', ...
    'Resize', 'Off', ...
    'Position',[.5*(scrsz(3) - guisize(1)),.5*(scrsz(4) - guisize(2)), ...
    guisize(1), guisize(2)]);

h.fig = MainWindow;

h.ButtonPanel = uipanel('Parent', MainWindow, ...
    'Units', 'normalized', ...
    'Position', [0.0, 0.95, 1, 0.05]);

h.TextPanel = uipanel('Parent', MainWindow, ...
    'Units', 'normalized', ...
    'Position', [0.0, 0.9, 1, 0.05]);

h.NoteDiscretisation = uicontrol('Parent', h.TextPanel, ...
    'FontSize', 10, ...
    'Style', 'text', ...
    'HorizontalAlignment', 'left', ...
    'String', 'Bitte Diskretisierung pro Linie angeben:', ...
    'Units', 'normalized', ...
    'Position', [0.01, 0, 0.3, 0.9]);

h.EnterDiscretisation = uicontrol('Parent', h.TextPanel, ...
    'Style', 'edit', ...
    'BackgroundColor', 'w', ...
    'Units', 'normalized', ...
    'Position', [0.32, 0.05, 0.05, 0.9], ...
    'Callback', @EnterDiscretisation);

h.DiscretisationInfo = uicontrol('Parent', h.TextPanel, ...
    'Style', 'text', ...
    'Fontsize', 10, ...
    'String', '', ...
    'HorizontalAlignment', 'left', ...
    'Units', 'normalized', ...
    'Position', [0.39, 0, 0.25, 0.9]);

h.VeloTxt = uicontrol('Parent', h.TextPanel, ...
    'Style', 'text', ...
    'Fontsize', 10, ...
    'String', 'Vorschub[m/s]:', ...
    'HorizontalAlignment', 'left', ...
    'Units', 'normalized', ...
    'Position', [0.65, 0, 0.25, 0.9]);

h.EnterVelo = uicontrol('Parent', h.TextPanel, ...
    'Style', 'edit', ...
    'BackgroundColor', 'w', ...
    'Units', 'normalized', ...
    'Position', [0.77, 0.05, 0.05, 0.9], ...
    'Callback', @EnterVelo);

h.VeloInfo = uicontrol('Parent', h.TextPanel, ...
    'Style', 'text', ...
    'Fontsize', 10, ...
    'String', '', ...
    'HorizontalAlignment', 'left', ...
    'Units', 'normalized', ...
    'Position', [0.83, 0, 0.25, 0.9]);

h.MainPanel = uipanel('Parent', MainWindow, ...
    'Units', 'normalized',...
    'Position', [0.0, 0.0, 1, 0.9]);

h.ApplyClose = uicontrol('Parent', h.ButtonPanel, ...
    'Style', 'pushbutton', ...
    'String', 'Apply & Close', ...
    'FontSize', 10, ...
    'Units', 'normalized',...
    'Position', [0.5, 0, 0.5, 1],...
    'Callback', @ApplyClose);

h.AddLine = uicontrol('Parent', h.ButtonPanel, ...
    'Parent', h.ButtonPanel, ...
    'Style', 'pushbutton', ...
    'String', 'Add Line', ...
    'FontSize', 10, ...
    'Units', 'normalized',...
    'Position', [0, 0, 0.5, 1],...
    'Callback', @AddLine);

h.Axes = axes('Parent', h.MainPanel, ...
    'Units', 'normalized',...
    'OuterPosition', [0, 0, 1, 1], ...
    'xlim', [0, L], ...
    'ylim', [0, B]);

h.count = 0;
set(h.EnterDiscretisation, 'String', num2str(2))
set(h.EnterVelo, 'String', num2str(10e-2))

guidata(MainWindow, h);

uiwait(h.fig)

LineCoords = h.LineCoords;
SeamLength = h.SeamLength;
Discretisation = h.Discretisation;
Velocity = h.Velo;

close(h.fig)

%% Callback Funktionen

    function AddLine(hObject, ~)
        h = guidata(hObject);
        
        h.count = h.count + 1;
        
        h.Line{h.count,1} = imline(h.Axes);
        
        guidata(hObject, h);
        
        uiwait(h.fig)
    end

    function EnterDiscretisation(hObject, ~)
        h = guidata(hObject);
        
        if str2double(get(h.EnterDiscretisation, 'String')) < 2 || isnan(str2double(get(h.EnterDiscretisation, 'String')))
            set(h.DiscretisationInfo, 'String', 'Bitte nur Werte >= 2 eingeben.')
            set(h.DiscretisationInfo, 'ForegroundColor', 'r')
            set(h.ApplyClose, 'Enable', 'off')
        else
            set(h.DiscretisationInfo, 'String', '')
            set(h.ApplyClose, 'Enable', 'on')
        end
        
        guidata(hObject, h);
    end

    function EnterVelo(hObject, ~)
        h = guidata(hObject);
        
        if str2double(get(h.EnterVelo, 'String')) <= 0 || isnan(str2double(get(h.EnterVelo, 'String')))
            set(h.VeloInfo, 'String', 'Nur positive Werte!')
            set(h.VeloInfo, 'ForegroundColor', 'r')
            set(h.ApplyClose, 'Enable', 'off')
        else
            set(h.VeloInfo, 'String', '')
            set(h.ApplyClose, 'Enable', 'on')
        end
        
        guidata(hObject, h);
    end

    function ApplyClose(hObject, ~)
        h = guidata(hObject);
        
        for i = 1:h.count
            h.LineCoords{i,1} = getPosition(h.Line{i,1});
        end
        
        % Bestimmung der Länge der gezeichneten Schweißnaht
        fun = @(i) norm(h.LineCoords{i,1}(2,:) - ...
            h.LineCoords{i,1}(1,:));
        
        % Für jede gezeichnete Linie wird die Länge bestimmt
        h.SeamLength = zeros(length(h.LineCoords), 1);
        for i = 1:length(h.LineCoords)
            h.SeamLength(i) = fun(i);
        end
        % Alle einzel Längen werden aufsummiert
        h.SeamLength = sum(h.SeamLength);
        
        % Speichern der Diskretisierung
        h.Discretisation = str2double(get(h.EnterDiscretisation, 'String'));
        
        % Speicherung der Geschwindigkeit
        h.Velo = str2double(get(h.EnterVelo, 'String'));
        
        guidata(hObject, h);
        
        uiresume(h.fig)
    end
end

